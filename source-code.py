# -*- coding: utf-8 -*-
"""aimlProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_sI8Z4f08vnSYW3825MtkklpzorXRNUf
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

disorders = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/Mental health Depression disorder Data.xlsx")

disorders

disorders.sample()

disorders.sample(3)

disorders.shape

disorders.size

disorders.ndim

disorders.info

disorders.index

disorders.columns

disorders.dtypes

disorders.count()

disorders.nunique()

disorders = disorders.rename(columns={"Schizophrenia (%)":"Schizophrenia", "Bipolar disorder (%)":"BipolarDisorder", "Eating disorders (%)":"EatingDisorders", "Anxiety disorders (%)":"AnxietyDisorders", "Drug use disorders (%)":"DrugUseDisorders", "Depression (%)":"Depression", "Alcohol use disorders (%)":"AlcoholUseDisorders"})
disorders

disorders.Depression.value_counts()

disorders.memory_usage()

disorders.memory_usage(deep=True)

disorders.duplicated()

disorders.describe()

disorders.Depression.mean()

disorders.min()

disorders.max()

disorders.Depression.nsmallest(3)

disorders.Depression.nlargest(3)

disorders.head()

disorders.head(4)

disorders.tail()

disorders.tail(3)

disorders[:]

disorders[:7]

disorders[-20:]

disorders[1005:1015]

disorders['Depression']

disorders[['Depression', 'EatingDisorders']]

disorders[disorders.Depression>4.5]

disorders[disorders.Depression.between(2, 2.5)]

disorders.loc[1000:1030, 'EatingDisorders':'Depression']

disorders = disorders.drop(columns=['Code'])
disorders

disorders.isna().sum()

disorders.isna().all()

disorders.count().plot.bar()

disorders.count().plot.barh()

disorders.Depression.plot.kde().set(title="Distribution of Depression Datapoints", xlabel="")

disorders.corr()

sns.heatmap(disorders.corr())

sns.heatmap(disorders.corr(), annot=True)

sns.heatmap(disorders.corr(), annot=True, cmap='Blues')

plt.scatter(disorders.Schizophrenia,disorders.Depression)
plt.title("Distribution of datapoints (Depression vs Schizophrenia)")
plt.show()

plt.scatter(disorders.BipolarDisorder,disorders.Depression)
plt.title("Distribution of datapoints (Depression vs Bipolar Disorder)")
plt.show()

plt.scatter(disorders.EatingDisorders,disorders.Depression)
plt.title("Distribution of datapoints (Depression vs Eating Disorders)")
plt.show()

plt.scatter(disorders.AnxietyDisorders,disorders.Depression)
plt.title("Distribution of datapoints (Depression vs Anxiety Disorders)")
plt.show()

plt.scatter(disorders.DrugUseDisorders,disorders.Depression)
plt.title("Distribution of datapoints (Depression vs Drug Use Disorders)")
plt.show()

plt.scatter(disorders.AlcoholUseDisorders,disorders.Depression)
plt.title("Distribution of datapoints (Depression vs Alocohol Use Disorders)")
plt.show()

sns.jointplot(x='BipolarDisorder', y='Depression', data=disorders, kind='reg')

sns.jointplot(x='EatingDisorders', y='Depression', data=disorders, kind='reg')

sns.boxplot(x=disorders['Depression'])

sns.violinplot(x=disorders['AnxietyDisorders'])

sns.regplot(x='AnxietyDisorders', y='Depression', data=disorders,ci=None)

sns.lmplot(x='DrugUseDisorders', y='Depression', data=disorders)

disordersWorld = disorders.drop(["Entity"], axis=1)
disordersWorld.isna().sum()

disordersWorld = pd.DataFrame(disordersWorld).groupby(["Year"]).mean()

disordersWorld

disordersWorld.shape

disordersWorld.ndim

disordersWorld.describe()

disordersWorld.index

disordersWorld.columns

disordersWorld.nunique()

disordersWorld.duplicated()

disordersWorld.corr()

sns.heatmap(disordersWorld.corr(), annot=True).set(title="Correlation Between Different Disorders")

sns.barplot(data=disordersWorld, orient='h').set(xlabel='Percentage of Population', title="Mental Health Disorders (World View)")

disordersWorld.plot.line().set(ylabel="Percentage of Population")



disordersWorld.Schizophrenia.plot.line().set(ylabel="Schizophrenia (% of population having it)")

disordersWorld.BipolarDisorder.plot.line().set(ylabel="Bipolar Disorders (% of population having it)")

disordersWorld.EatingDisorders.plot.line().set(ylabel="Eating Disorders (% of population having it)")

disordersWorld.AnxietyDisorders.plot.line().set(ylabel="Anxiety Disorders (% of population having it)")

disordersWorld.DrugUseDisorders.plot.line().set(ylabel="Drug Use Disorders (% of population having it)")

disordersWorld.Depression.plot.line().set(ylabel="Depression (% of population having it)")

disordersWorld.AlcoholUseDisorders.plot.line().set(ylabel="Alcohol Use Disorders (% of population having it)")















x = disorders[['Schizophrenia', 'BipolarDisorder', 'EatingDisorders', 'AnxietyDisorders', 'DrugUseDisorders', 'AlcoholUseDisorders']]
x

y = disorders['Depression']
y

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)

x_train.shape

from sklearn.linear_model import LinearRegression

regressor = LinearRegression(fit_intercept = True)
regressor = regressor.fit(x_train, y_train)

print('Linear Model Coefficient (m): ', regressor.coef_)
print('Linear Model Intercept (b): ', regressor.intercept_)

y_predict = regressor.predict(x_test)
y_predict

y_test

from sklearn import metrics
acc = metrics.mean_squared_error(y_test, y_predict)
print("Mean Square Error: ", acc)
acc = metrics.mean_absolute_error(y_test, y_predict)
print("Mean Absolute Error: ", acc)
wts = regressor.coef_
incpt = regressor.intercept_
print("Slope: ", wts, "\nIntercept ", incpt)

regressor1 = pd.DataFrame({'Actual value':y_test, 'predicted value':y_predict})
regressor1.head()

# Predictions
inpredict = [
    [0.1, 0.5, 0.1,  5, 1.5, 0.5],
    [0.12, 0.43, 0.12, 4.5, 1.34, 0.45],
    [0.11, 0.41, 0.13, 4.99, 1.49, 5.1]
]
regressor.predict(inpredict)